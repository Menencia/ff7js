// Generated by CoffeeScript 1.7.1
var Action;

Action = (function() {
  Action.prototype.fighter = null;

  Action.prototype.targets = [];

  Action.prototype.hits = 0;

  Action.prototype.plot = '.plot';

  function Action(battle, fighter) {
    this.battle = battle;
    this.fighter = fighter;
  }

  Action.prototype.target = function(key) {
    switch (key) {
      case 'random':
        return this.targets = [_.sample(this.battle.opponents)];
    }
  };

  Action.prototype.damages = function(hits) {
    this.hits = hits;
  };

  Action.prototype.exec = function(fn) {
    var moves;
    moves = [];
    moves.push(new Move(((function(_this) {
      return function() {
        return $(_this.plot).attr('src', '/img/sprites/cloud2.png');
      };
    })(this)), 100));
    moves.push(new Move(((function(_this) {
      return function() {
        return $(_this.plot).attr('src', '/img/sprites/cloud1.png');
      };
    })(this)), 100));
    moves.push(new Move(((function(_this) {
      return function() {
        return $(_this.plot).attr('src', '/img/sprites/cloud2.png');
      };
    })(this)), 50));
    moves.push(new Move(((function(_this) {
      return function() {
        return $(_this.plot).attr('src', '/img/sprites/cloud3.png');
      };
    })(this)), 50));
    moves.push(new Move(((function(_this) {
      return function() {
        return $(_this.plot).attr('src', '/img/sprites/cloud4.png');
      };
    })(this)), 50));
    moves.push(new Move(((function(_this) {
      return function() {
        return $(_this.plot).attr('src', '/img/sprites/cloud3.png');
      };
    })(this)), 100));
    moves.push(new Move(((function(_this) {
      return function() {
        return $('.msg').text(_this.hits);
      };
    })(this)), 0));
    moves.push(new Move(((function(_this) {
      return function() {
        return $('.msg').css({
          top: '-1px',
          opacity: 0.9
        });
      };
    })(this)), 0));
    moves.push(new Move(((function(_this) {
      return function() {
        return $('.msg').css({
          top: '-2px',
          opacity: 0.9
        });
      };
    })(this)), 70));
    moves.push(new Move(((function(_this) {
      return function() {
        return $('.msg').css({
          top: '-3px',
          opacity: 0.8
        });
      };
    })(this)), 70));
    moves.push(new Move(((function(_this) {
      return function() {
        return $('.msg').css({
          top: '-4px',
          opacity: 0.8
        });
      };
    })(this)), 70));
    moves.push(new Move(((function(_this) {
      return function() {
        return $('.msg').css({
          top: '-5px',
          opacity: 0.7
        });
      };
    })(this)), 70));
    moves.push(new Move(((function(_this) {
      return function() {
        return $('.msg').css({
          top: '-6px',
          opacity: 0.7
        });
      };
    })(this)), 70));
    moves.push(new Move(((function(_this) {
      return function() {
        return $('.msg').css({
          top: '-7px',
          opacity: 0.6
        });
      };
    })(this)), 70));
    moves.push(new Move(((function(_this) {
      return function() {
        return $('.msg').css({
          top: '-8px',
          opacity: 0.6
        });
      };
    })(this)), 70));
    moves.push(new Move(((function(_this) {
      return function() {
        return $('.msg').css({
          top: '-9px',
          opacity: 0.5
        });
      };
    })(this)), 70));
    moves.push(new Move(((function(_this) {
      return function() {
        return $('.msg').css({
          top: '-10px',
          opacity: 0.5
        });
      };
    })(this)), 70));
    moves.push(new Move(((function(_this) {
      return function() {
        return $('.msg').text('');
      };
    })(this)), 40));
    return new Mover(this.battle.Game.$timeout, moves, (function(_this) {
      return function() {
        var target, _i, _len, _ref;
        _ref = _this.targets;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          target = _ref[_i];
          target.getDamaged(_this.hits);
        }
        return fn();
      };
    })(this));
  };

  return Action;

})();
